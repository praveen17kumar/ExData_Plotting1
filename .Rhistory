y$a #matches partial names
y[["a"]] #null
y[["a",extract = FALSE]]
y[["a",exact = FALSE]]
swirl
swirl()
library("swirl", lib.loc="~/R/win-library/3.5")
swirl(
)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
telegram()
submit()
submit()
submit()
mad_libs("Bangalore","Beautiful","Dog")
submit()
submit()
submit()
%p%("I","love","R")
"I"%p%"love"%p%"R"
"I"%p%"love"%p%"R!"
if(x > 5) {
x <- 0
}
exit()
0
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
y<-10
f(3)
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
.h
h
library("swirl")
swirl()
d
d1 <- Sys.Date()
class(d1)
unclass(d1)
di
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
system.time()
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "october 17,1986 08:24"
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d", %Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique,numeric(1))
vapply(flags, unique, numeric(1))
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
library(datasets)
data("iris")
View(unique_vals)
?iris
library(datasets)
data(mtcars)
str(rnorm)
library("swirl")
swirl()
ls()
class(plats)
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names((plants))
names(plants)
head()
head(plants)
head(plants,10)
tail()
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=T)
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
sample(letters)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(1, 100, replace = TRUE, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data("cars")
library(datasets)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot()
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed,xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
boxplot(mtcars)
str(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl,data = mtcars
)
hist(mtcars)
hist(mtcars$mpg)
#extracting information from the xml or source code from websites
fileurl <- "http://www.espn.in/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileurl,useInternal = TRUE)
#extracting information from the xml or source code from websites
library(XML)
#extracting information from the xml or source code from websites
library("XML")
install.packages("XML")
install.packages("htmltools")
install.packages("htmltab")
install.packages("htmlTable")
#extracting information from the xml or source code from websites
library("XML")
fileurl <- "http://www.espn.in/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileurl,useInternal = TRUE)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team]",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team']",xmlValue)
scors
scores
teams
print(scores)
scores[1]
scores[[1]]
library("jsonlite")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
jsondata$name
myjson <- toJSON(iris,pretty = TRUE)
cat(myjson)
#convert bck to json
iris_reproduced <- fromJSON(myjson)
head(iris_reproduced)
#data table....faster way to work on data.frames ...made up using c language
library(data.table)
install.packages("data.table")
#data table....faster way to work on data.frames ...made up using c language
library(data.table)
df <- data.frame(x=xnorm=(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
df = data.frame(x=xnorm=(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
df = data.frame(x=xnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
df = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(df,3)
dt=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(dt)
df
dt
tables()
#data table....faster way to work on data.frames ...made up using c language
library(data.table)
df = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(df,3)
df
dt=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(dt)
dt
tables()
dt[2,]
dt[,2]
dt[dt$y='a']
dt[dt$y="a"]
dt[dt$y="a"]
dt[dt$y=="a"]
{
x=1
y=2
}
k={print(10);5}
print(k)
print(print(2))
print(print(4))
dt[,mean(x),sum(z)]
dt[,list(mean(x),sum(z))]
dt[,table(y)]
dt[table(y),]
dt[,w:=x^2]
dt
#mysql
ucsdb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
install.packages("dbConnect")
#mysql
ucsdb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
#mysql
ucsdb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
#mysql
ucsdb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
#mysql
library(dbConnect)
ucsdb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucsdb,"show databases;");dbDisconnect(ucsdb)
result
install.packages("hdf5r")
#HDF5 - hirarchical data format
source("http://bioconductor.org/biocLite.R")
biocLite("rdhf5")
con <- url("https://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
htmlcode <- readLines(con)
htmlcode
close(con)
htmlcode
#parsing with xml
library("XML")
url <- "https://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en"
html <- htmlTreeParse(url,useInternalNodes = T)
#get from httr package
library("httr")
html2 <- url
contents2 <- content(html2,as="text")
contents2 = content(html2,as="text")
parsedhtml = htmlParse(contents2,asText = T)
#reshaping datasets . goal is to produce a tidy dataset such that every variable has its
#own column and every data has its own row.
library(reshape2)
head(mtcars)
mtcar$carnames = rownames(mtcars)
mtcarnames = rownames(mtcars)
setwd("~/GitAll/Explor_course_project1/ExData_Plotting1")
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file,header = TRUE,sep=";",stringsAsFactors = F,dec=".")
subset_of_data <- data[data$Date %in% c("1/2/2007","2/2/2007"),]
datetime <- strptime(paste(subset_of_data$Date, subset_of_data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subset_of_data$Global_active_power)
submetering1 <- as.numeric(subset_of_data$Sub_metering_1)
submetering2 <- as.numeric(subset_of_data$Sub_metering_2)
submetering3 <- as.numeric(subset_of_data$Sub_metering_3)
png("plot3.png",width = 480,height = 480)
plot(datetime,submetering1,type=1,ylab = "Energy Submetering")
plot(datetime,submetering1,type="1",ylab = "Energy Submetering")
plot(datetime,submetering1,type="1",ylab = "Energy Submetering",xlab="")
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file,header = TRUE,sep=";",stringsAsFactors = F,dec=".")
subset_of_data <- data[data$Date %in% c("1/2/2007","2/2/2007"),]
datetime <- strptime(paste(subset_of_data$Date, subset_of_data$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subset_of_data$Global_active_power)
submetering1 <- as.numeric(subset_of_data$Sub_metering_1)
submetering2 <- as.numeric(subset_of_data$Sub_metering_2)
submetering3 <- as.numeric(subset_of_data$Sub_metering_3)
png("plot3.png",width = 480,height = 480)
plot(datetime,submetering1,type="1",ylab = "Energy Submetering",xlab="")
plot(datetime,submetering1,ylab = "Energy Submetering",xlab="",type = 1)
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot_3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
png("plot_2.png", width=480, height=480)
dev.off()
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
dev.off()
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
globalActivePower <- as.numeric(subSetData$Global_active_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot_4.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
par(mfrow = c(2, 2))
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
file <- "C:/Users/Praveen/Documents/GitAll/Explor_course_project1/household_power_consumption.txt"
data <- read.table(file, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot_4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
